Secrets Management for Authentication

Objective: To learn how to manage secrets for authentication purposes.

Task: Provide students with an application that requires authentication credentials, such as tokens or certificates. Instruct them to create a Kubernetes Secret containing these credentials and configure the application pods to use the Secret for authentication. Students should demonstrate successful authentication using the secrets.

Instructions:

Step 1: Authentication Scenario (10 points)

Describe a hypothetical scenario to students where they are tasked with deploying a Kubernetes application that requires authentication. Explain that the application expects authentication credentials, such as API tokens or TLS certificates, to access external services or resources.

Provide students with the source code or Docker images for the application they need to deploy. Ensure that the application code is designed to use authentication credentials stored in environment variables.

Step 2: Creating a Kubernetes Secret (25 points)

Task students with creating a Kubernetes Secret that contains the required authentication credentials. They should write a YAML manifest for the Secret.

Instruct students to populate the Secret with the appropriate authentication credentials, such as tokens, certificates, or keys.

Step 3: Deploying the Application (20 points)

Explain to students how to deploy the application pods using Kubernetes manifests. They should create pod specifications that include volume mounts and environment variables to access the Secret data.

Ensure that students understand how to reference the Secret in their pod specifications and how to set environment variables using the Secret data.

Step 4: Authentication Verification (25 points)

Instruct students to deploy their application pods using the Kubernetes manifests they created.

Task them with demonstrating that the application successfully uses the authentication credentials from the Secret to authenticate with external services or resources. They should validate that the application can access the resources it needs.

Step 5: Documentation and Reflection (20 points)

Require students to create documentation that includes:

The YAML manifest for the Secret.
The pod specifications showing how Secrets are mounted and how environment variables are set.
Screenshots or logs demonstrating that the application successfully authenticated using the Secret.
Ask students to reflect on their experience and describe how using Kubernetes Secrets simplified the authentication process for their application.

Grading Criteria:

Accurate creation of the Kubernetes Secret.

Proper population of the Secret with the required authentication credentials.

Correct configuration of pods to access Secret data.

Successful demonstration of the application authenticating using the Secret.

Comprehensive documentation and reflection.